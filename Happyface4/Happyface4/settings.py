"""
Django settings for Happyface4 project.

Generated by 'django-admin startproject' using Django 2.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import sys
from datetime import timedelta

import yaml

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# add the HF4-Analyses folder to the pythonpath and save the path in ANALYSES_DIR
ANALYSES_DIR = os.path.join(
    os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))),
    "HF4-Analyses",
)
sys.path.insert(0, ANALYSES_DIR)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_ROOT = BASE_DIR + "/static/"
STATIC_URL = "/static/"

# Media Files that are collected by happyface
MEDIA_ROOT = STATIC_ROOT + "media/"
MEDIA_URL = "/media/"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "development_secret_key123!?")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG") == "True"

ALLOWED_HOSTS = os.getenv("HF_HOSTS").split()

if DEBUG:
    ALLOWED_HOSTS.extend([".localhost", "127.0.0.1", "[::1]"])

# Type of Field when primary key field is automatically generated.
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# Application definition

INSTALLED_APPS = [
    "commands.apps.CommandsConfig",
    "django.contrib.staticfiles",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.auth",
    "rest_framework",
    "Happyface4.apps.Happyface4Config",
]

# Load analyses from analyses_list.yaml file in ANALYSES_DIR
ANALYSES_LIST = os.path.join(ANALYSES_DIR, "analyses_list.yaml")
with open(ANALYSES_LIST, "r") as a_list_file:
    INSTALLED_APPS += yaml.safe_load(a_list_file) or []

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "Happyface4.urls"


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ["Happyface4/templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "Happyface4.wsgi.application"

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB"),
        "USER": os.getenv("POSTGRES_USER"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT"),
    }
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "standard": {
            "format": "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            "datefmt": "%d/%b/%Y %H:%M:%S",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "level": "INFO",
            "formatter": "standard",
        },
        "mail_admins": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
            "include_html": True,
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "mail_admins"],
            "level": "WARNING",
            "propagate": True,
        },
        "getData": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
        "Happyface4": {
            "handlers": ["console", "mail_admins"],
            "level": "INFO",
            "propagate": True,
        },
    },
}

# Email settings
if not DEBUG:
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = os.getenv("EMAIL_HOST")
    EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS") == "True"
    EMAIL_PORT = int(os.getenv("EMAIL_PORT"))
    # The email address of the sender of error message emails
    SERVER_EMAIL = os.getenv("SERVER_EMAIL")
    # We don't need a prefix, as the email list already creates one
    EMAIL_SUBJECT_PREFIX = ""
    # Mail to the Admins, is used by the logging service.
    ADMINS = [("Happyface Admins", SERVER_EMAIL)]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = os.getenv("TIME_ZONE")
USE_I18N = True
USE_L10N = True
USE_TZ = True

# happyface settings
PULL_INTERVAL = timedelta(
    minutes=int(os.getenv("GETDATA_INTERVALL", "15"))
)  # time interval in which new data should be fetched.
GETDATA_SLEEP = 60  # time span (in seconds) getDataRoutine sleeps until it checks if it is time to get new data (set with PULL_INTERVAL).
OVERVIEW_RANGE = (
    PULL_INTERVAL * 4 * 24
)  # Time range in which the instance status should be displayed on the start page

LEGALS_URL = os.getenv("LEGALS_URL")  # URL of the legal notice
COMMIT_SHA = os.getenv("COMMIT_SHA")  # the commit hash of this version
DOCUMENTATION_URL = os.getenv("CI_PAGES_URL")  # URL of the generated documentation

# healthcheck.io link which will be pinged every PULL_INTERVAL with getData, else ther will be a warn mail
if not DEBUG:
    HEALTHCHECK_PING_URL = os.getenv("HEALTHCHECK_PING_URL", "")
