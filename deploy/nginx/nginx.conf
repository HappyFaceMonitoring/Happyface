# source (adapted): https://docs.gunicorn.org/en/stable/deploy.html

worker_processes 1;

user nobody nogroup;
# 'user nobody nobody;' for systems with 'nobody' as a group instead
error_log /dev/stderr warn;
pid /var/run/nginx.pid;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
  # 'use epoll;' to enable for Linux 2.6+
  # 'use kqueue;' to enable for FreeBSD, OSX
}

http {
  include mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;
  access_log /dev/stdout combined;
  sendfile on;

  upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    server unix:/app/gunicorn.sock fail_timeout=0;
  }

  # server {
  #   # redirect all port 80 http requests to https
  #   listen 80;
  #   listen [::]:80;
  #   server_name _;
  #   return 301 https://$host$request_uri;
  # }

  server {
    # if no Host match, close the connection to prevent host spoofing
    listen 80;
    listen [::]:80;

    return 444;
  }

  server {
    # use 'listen 80 deferred;' for Linux
    listen 80;
    listen [::]:80;
    client_max_body_size 4G;

    # set the correct host(s) for your site
    server_name $HF_HOSTS;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";

    keepalive_timeout 5;

    # safe default path (for static files)
    root /app/Happyface4/media;

    location /media/ {
      alias /usr/share/nginx/html/media/;
    }

    location /static/ {
      alias /usr/share/nginx/html/;
    }

    location = /robots.txt {
      add_header Content-Type text/plain;
      return 200 "User-agent: *\nDisallow: /\n";
  }

    location / {
      # checks for static file, if not found proxy to app
      try_files $uri @proxy_to_app;
    }

    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass http://website:8000;
    }

    error_page 500 502 503 504 /500.html;
    location = /500.html {
      root /app/error_pages; # TODO
    }
  }
}
